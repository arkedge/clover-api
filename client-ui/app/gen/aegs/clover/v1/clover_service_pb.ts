// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file aegs/clover/v1/clover_service.proto (package aegs.clover.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Contact, GroundStation, Pass, Satellite, TLE, TLERecord } from "./models_pb.js";

/**
 * @generated from message aegs.clover.v1.ListSatellitesRequest
 */
export class ListSatellitesRequest extends Message<ListSatellitesRequest> {
  constructor(data?: PartialMessage<ListSatellitesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.ListSatellitesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSatellitesRequest {
    return new ListSatellitesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSatellitesRequest {
    return new ListSatellitesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSatellitesRequest {
    return new ListSatellitesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSatellitesRequest | PlainMessage<ListSatellitesRequest> | undefined, b: ListSatellitesRequest | PlainMessage<ListSatellitesRequest> | undefined): boolean {
    return proto3.util.equals(ListSatellitesRequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.ListSatellitesResponse
 */
export class ListSatellitesResponse extends Message<ListSatellitesResponse> {
  /**
   * クライアントがアクセス可能な衛星のリスト
   *
   * @generated from field: repeated aegs.clover.v1.Satellite satellites = 1;
   */
  satellites: Satellite[] = [];

  constructor(data?: PartialMessage<ListSatellitesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.ListSatellitesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellites", kind: "message", T: Satellite, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSatellitesResponse {
    return new ListSatellitesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSatellitesResponse {
    return new ListSatellitesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSatellitesResponse {
    return new ListSatellitesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSatellitesResponse | PlainMessage<ListSatellitesResponse> | undefined, b: ListSatellitesResponse | PlainMessage<ListSatellitesResponse> | undefined): boolean {
    return proto3.util.equals(ListSatellitesResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.GetSatelliteRequest
 */
export class GetSatelliteRequest extends Message<GetSatelliteRequest> {
  /**
   * 取得する衛星の ID
   *
   * @generated from field: int64 satellite_id = 1;
   */
  satelliteId = protoInt64.zero;

  constructor(data?: PartialMessage<GetSatelliteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.GetSatelliteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellite_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSatelliteRequest {
    return new GetSatelliteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSatelliteRequest {
    return new GetSatelliteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSatelliteRequest {
    return new GetSatelliteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSatelliteRequest | PlainMessage<GetSatelliteRequest> | undefined, b: GetSatelliteRequest | PlainMessage<GetSatelliteRequest> | undefined): boolean {
    return proto3.util.equals(GetSatelliteRequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.GetSatelliteResponse
 */
export class GetSatelliteResponse extends Message<GetSatelliteResponse> {
  /**
   * 指定された ID に対応する衛星
   *
   * @generated from field: aegs.clover.v1.Satellite satellite = 1;
   */
  satellite?: Satellite;

  constructor(data?: PartialMessage<GetSatelliteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.GetSatelliteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellite", kind: "message", T: Satellite },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSatelliteResponse {
    return new GetSatelliteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSatelliteResponse {
    return new GetSatelliteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSatelliteResponse {
    return new GetSatelliteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSatelliteResponse | PlainMessage<GetSatelliteResponse> | undefined, b: GetSatelliteResponse | PlainMessage<GetSatelliteResponse> | undefined): boolean {
    return proto3.util.equals(GetSatelliteResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.GetLatestTLERequest
 */
export class GetLatestTLERequest extends Message<GetLatestTLERequest> {
  /**
   * TLE を取得する衛星の ID
   *
   * @generated from field: int64 satellite_id = 1;
   */
  satelliteId = protoInt64.zero;

  constructor(data?: PartialMessage<GetLatestTLERequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.GetLatestTLERequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellite_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestTLERequest {
    return new GetLatestTLERequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestTLERequest {
    return new GetLatestTLERequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestTLERequest {
    return new GetLatestTLERequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestTLERequest | PlainMessage<GetLatestTLERequest> | undefined, b: GetLatestTLERequest | PlainMessage<GetLatestTLERequest> | undefined): boolean {
    return proto3.util.equals(GetLatestTLERequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.GetLatestTLEResponse
 */
export class GetLatestTLEResponse extends Message<GetLatestTLEResponse> {
  /**
   * 指定された衛星の最新の TLE 情報
   *
   * @generated from field: aegs.clover.v1.TLERecord tle_record = 1;
   */
  tleRecord?: TLERecord;

  constructor(data?: PartialMessage<GetLatestTLEResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.GetLatestTLEResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tle_record", kind: "message", T: TLERecord },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLatestTLEResponse {
    return new GetLatestTLEResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLatestTLEResponse {
    return new GetLatestTLEResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLatestTLEResponse {
    return new GetLatestTLEResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLatestTLEResponse | PlainMessage<GetLatestTLEResponse> | undefined, b: GetLatestTLEResponse | PlainMessage<GetLatestTLEResponse> | undefined): boolean {
    return proto3.util.equals(GetLatestTLEResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.RegisterTLERequest
 */
export class RegisterTLERequest extends Message<RegisterTLERequest> {
  /**
   * TLE を登録する衛星の ID
   *
   * @generated from field: int64 satellite_id = 1;
   */
  satelliteId = protoInt64.zero;

  /**
   * 登録する TLE
   *
   * @generated from field: aegs.clover.v1.TLE tle = 2;
   */
  tle?: TLE;

  constructor(data?: PartialMessage<RegisterTLERequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.RegisterTLERequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellite_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "tle", kind: "message", T: TLE },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterTLERequest {
    return new RegisterTLERequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterTLERequest {
    return new RegisterTLERequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterTLERequest {
    return new RegisterTLERequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterTLERequest | PlainMessage<RegisterTLERequest> | undefined, b: RegisterTLERequest | PlainMessage<RegisterTLERequest> | undefined): boolean {
    return proto3.util.equals(RegisterTLERequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.RegisterTLEResponse
 */
export class RegisterTLEResponse extends Message<RegisterTLEResponse> {
  /**
   * 登録された TLE の情報
   *
   * @generated from field: aegs.clover.v1.TLERecord tle_record = 1;
   */
  tleRecord?: TLERecord;

  constructor(data?: PartialMessage<RegisterTLEResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.RegisterTLEResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tle_record", kind: "message", T: TLERecord },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterTLEResponse {
    return new RegisterTLEResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterTLEResponse {
    return new RegisterTLEResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterTLEResponse {
    return new RegisterTLEResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterTLEResponse | PlainMessage<RegisterTLEResponse> | undefined, b: RegisterTLEResponse | PlainMessage<RegisterTLEResponse> | undefined): boolean {
    return proto3.util.equals(RegisterTLEResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.ListAvailableGroundStationsRequest
 */
export class ListAvailableGroundStationsRequest extends Message<ListAvailableGroundStationsRequest> {
  /**
   * 利用可能な地上局を取得する衛星の ID
   *
   * @generated from field: int64 satellite_id = 1;
   */
  satelliteId = protoInt64.zero;

  constructor(data?: PartialMessage<ListAvailableGroundStationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.ListAvailableGroundStationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellite_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAvailableGroundStationsRequest {
    return new ListAvailableGroundStationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAvailableGroundStationsRequest {
    return new ListAvailableGroundStationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAvailableGroundStationsRequest {
    return new ListAvailableGroundStationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAvailableGroundStationsRequest | PlainMessage<ListAvailableGroundStationsRequest> | undefined, b: ListAvailableGroundStationsRequest | PlainMessage<ListAvailableGroundStationsRequest> | undefined): boolean {
    return proto3.util.equals(ListAvailableGroundStationsRequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.ListAvailableGroundStationsResponse
 */
export class ListAvailableGroundStationsResponse extends Message<ListAvailableGroundStationsResponse> {
  /**
   * 指定された衛星で利用可能な地上局のリスト
   *
   * @generated from field: repeated aegs.clover.v1.GroundStation ground_stations = 1;
   */
  groundStations: GroundStation[] = [];

  constructor(data?: PartialMessage<ListAvailableGroundStationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.ListAvailableGroundStationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ground_stations", kind: "message", T: GroundStation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAvailableGroundStationsResponse {
    return new ListAvailableGroundStationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAvailableGroundStationsResponse {
    return new ListAvailableGroundStationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAvailableGroundStationsResponse {
    return new ListAvailableGroundStationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAvailableGroundStationsResponse | PlainMessage<ListAvailableGroundStationsResponse> | undefined, b: ListAvailableGroundStationsResponse | PlainMessage<ListAvailableGroundStationsResponse> | undefined): boolean {
    return proto3.util.equals(ListAvailableGroundStationsResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.GetGroundStationRequest
 */
export class GetGroundStationRequest extends Message<GetGroundStationRequest> {
  /**
   * 取得する地上局の ID
   *
   * @generated from field: int64 ground_station_id = 1;
   */
  groundStationId = protoInt64.zero;

  constructor(data?: PartialMessage<GetGroundStationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.GetGroundStationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ground_station_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGroundStationRequest {
    return new GetGroundStationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGroundStationRequest {
    return new GetGroundStationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGroundStationRequest {
    return new GetGroundStationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGroundStationRequest | PlainMessage<GetGroundStationRequest> | undefined, b: GetGroundStationRequest | PlainMessage<GetGroundStationRequest> | undefined): boolean {
    return proto3.util.equals(GetGroundStationRequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.GetGroundStationResponse
 */
export class GetGroundStationResponse extends Message<GetGroundStationResponse> {
  /**
   * 指定された ID に対応する地上局
   *
   * @generated from field: aegs.clover.v1.GroundStation ground_station = 1;
   */
  groundStation?: GroundStation;

  constructor(data?: PartialMessage<GetGroundStationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.GetGroundStationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ground_station", kind: "message", T: GroundStation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGroundStationResponse {
    return new GetGroundStationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGroundStationResponse {
    return new GetGroundStationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGroundStationResponse {
    return new GetGroundStationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGroundStationResponse | PlainMessage<GetGroundStationResponse> | undefined, b: GetGroundStationResponse | PlainMessage<GetGroundStationResponse> | undefined): boolean {
    return proto3.util.equals(GetGroundStationResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.ListPassesRequest
 */
export class ListPassesRequest extends Message<ListPassesRequest> {
  /**
   * パス算出の対象とする衛星の ID
   *
   * @generated from field: int64 satellite_id = 1;
   */
  satelliteId = protoInt64.zero;

  /**
   * パス算出の対象とする地上局の ID のリスト
   *
   * @generated from field: repeated int64 ground_station_ids = 2;
   */
  groundStationIds: bigint[] = [];

  constructor(data?: PartialMessage<ListPassesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.ListPassesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellite_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "ground_station_ids", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPassesRequest {
    return new ListPassesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPassesRequest {
    return new ListPassesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPassesRequest {
    return new ListPassesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPassesRequest | PlainMessage<ListPassesRequest> | undefined, b: ListPassesRequest | PlainMessage<ListPassesRequest> | undefined): boolean {
    return proto3.util.equals(ListPassesRequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.ListPassesResponse
 */
export class ListPassesResponse extends Message<ListPassesResponse> {
  /**
   * パスのリスト。
   * リストは AOS 時刻の昇順でソートされている
   *
   * @generated from field: repeated aegs.clover.v1.Pass passes = 1;
   */
  passes: Pass[] = [];

  constructor(data?: PartialMessage<ListPassesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.ListPassesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "passes", kind: "message", T: Pass, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPassesResponse {
    return new ListPassesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPassesResponse {
    return new ListPassesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPassesResponse {
    return new ListPassesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPassesResponse | PlainMessage<ListPassesResponse> | undefined, b: ListPassesResponse | PlainMessage<ListPassesResponse> | undefined): boolean {
    return proto3.util.equals(ListPassesResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.ListUpcomingContactsRequest
 */
export class ListUpcomingContactsRequest extends Message<ListUpcomingContactsRequest> {
  /**
   * コンタクトのリストを取得する対象の衛星 ID
   *
   * @generated from field: int64 satellite_id = 1;
   */
  satelliteId = protoInt64.zero;

  constructor(data?: PartialMessage<ListUpcomingContactsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.ListUpcomingContactsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellite_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUpcomingContactsRequest {
    return new ListUpcomingContactsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUpcomingContactsRequest {
    return new ListUpcomingContactsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUpcomingContactsRequest {
    return new ListUpcomingContactsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListUpcomingContactsRequest | PlainMessage<ListUpcomingContactsRequest> | undefined, b: ListUpcomingContactsRequest | PlainMessage<ListUpcomingContactsRequest> | undefined): boolean {
    return proto3.util.equals(ListUpcomingContactsRequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.ListUpcomingContactsResponse
 */
export class ListUpcomingContactsResponse extends Message<ListUpcomingContactsResponse> {
  /**
   * 指定された衛星を対象とした現在時刻以降のコンタクトのリスト
   *
   * @generated from field: repeated aegs.clover.v1.Contact contacts = 1;
   */
  contacts: Contact[] = [];

  constructor(data?: PartialMessage<ListUpcomingContactsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.ListUpcomingContactsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contacts", kind: "message", T: Contact, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListUpcomingContactsResponse {
    return new ListUpcomingContactsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListUpcomingContactsResponse {
    return new ListUpcomingContactsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListUpcomingContactsResponse {
    return new ListUpcomingContactsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListUpcomingContactsResponse | PlainMessage<ListUpcomingContactsResponse> | undefined, b: ListUpcomingContactsResponse | PlainMessage<ListUpcomingContactsResponse> | undefined): boolean {
    return proto3.util.equals(ListUpcomingContactsResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.GetContactRequest
 */
export class GetContactRequest extends Message<GetContactRequest> {
  /**
   * 取得するコンタクトの ID
   *
   * @generated from field: int64 contact_id = 1;
   */
  contactId = protoInt64.zero;

  constructor(data?: PartialMessage<GetContactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.GetContactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contact_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContactRequest {
    return new GetContactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContactRequest {
    return new GetContactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContactRequest {
    return new GetContactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetContactRequest | PlainMessage<GetContactRequest> | undefined, b: GetContactRequest | PlainMessage<GetContactRequest> | undefined): boolean {
    return proto3.util.equals(GetContactRequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.GetContactResponse
 */
export class GetContactResponse extends Message<GetContactResponse> {
  /**
   * 指定された ID に対応するコンタクト
   *
   * @generated from field: aegs.clover.v1.Contact contact = 1;
   */
  contact?: Contact;

  constructor(data?: PartialMessage<GetContactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.GetContactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contact", kind: "message", T: Contact },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContactResponse {
    return new GetContactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContactResponse {
    return new GetContactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContactResponse {
    return new GetContactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetContactResponse | PlainMessage<GetContactResponse> | undefined, b: GetContactResponse | PlainMessage<GetContactResponse> | undefined): boolean {
    return proto3.util.equals(GetContactResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.CreateContactRequest
 */
export class CreateContactRequest extends Message<CreateContactRequest> {
  /**
   * コンタクト対象の衛星の ID
   *
   * @generated from field: int64 satellite_id = 1;
   */
  satelliteId = protoInt64.zero;

  /**
   * コンタクトで使用する地上局の ID
   *
   * @generated from field: int64 ground_station_id = 2;
   */
  groundStationId = protoInt64.zero;

  /**
   * 作成するコンタクトの AOS 時刻
   *
   * @generated from field: google.protobuf.Timestamp aos = 3;
   */
  aos?: Timestamp;

  /**
   * 作成するコンタクトの LOS 時刻
   *
   * @generated from field: google.protobuf.Timestamp los = 4;
   */
  los?: Timestamp;

  constructor(data?: PartialMessage<CreateContactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.CreateContactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellite_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "ground_station_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "aos", kind: "message", T: Timestamp },
    { no: 4, name: "los", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateContactRequest {
    return new CreateContactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateContactRequest {
    return new CreateContactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateContactRequest {
    return new CreateContactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateContactRequest | PlainMessage<CreateContactRequest> | undefined, b: CreateContactRequest | PlainMessage<CreateContactRequest> | undefined): boolean {
    return proto3.util.equals(CreateContactRequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.CreateContactResponse
 */
export class CreateContactResponse extends Message<CreateContactResponse> {
  /**
   * 作成されたコンタクト
   *
   * @generated from field: aegs.clover.v1.Contact contact = 1;
   */
  contact?: Contact;

  constructor(data?: PartialMessage<CreateContactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.CreateContactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contact", kind: "message", T: Contact },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateContactResponse {
    return new CreateContactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateContactResponse {
    return new CreateContactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateContactResponse {
    return new CreateContactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateContactResponse | PlainMessage<CreateContactResponse> | undefined, b: CreateContactResponse | PlainMessage<CreateContactResponse> | undefined): boolean {
    return proto3.util.equals(CreateContactResponse, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.CancelContactRequest
 */
export class CancelContactRequest extends Message<CancelContactRequest> {
  /**
   * キャンセルするコンタクトの ID
   *
   * @generated from field: int64 contact_id = 1;
   */
  contactId = protoInt64.zero;

  constructor(data?: PartialMessage<CancelContactRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.CancelContactRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contact_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelContactRequest {
    return new CancelContactRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelContactRequest {
    return new CancelContactRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelContactRequest {
    return new CancelContactRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelContactRequest | PlainMessage<CancelContactRequest> | undefined, b: CancelContactRequest | PlainMessage<CancelContactRequest> | undefined): boolean {
    return proto3.util.equals(CancelContactRequest, a, b);
  }
}

/**
 * @generated from message aegs.clover.v1.CancelContactResponse
 */
export class CancelContactResponse extends Message<CancelContactResponse> {
  /**
   * キャンセルされたコンタクト
   *
   * @generated from field: aegs.clover.v1.Contact contact = 1;
   */
  contact?: Contact;

  constructor(data?: PartialMessage<CancelContactResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.CancelContactResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contact", kind: "message", T: Contact },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelContactResponse {
    return new CancelContactResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelContactResponse {
    return new CancelContactResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelContactResponse {
    return new CancelContactResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CancelContactResponse | PlainMessage<CancelContactResponse> | undefined, b: CancelContactResponse | PlainMessage<CancelContactResponse> | undefined): boolean {
    return proto3.util.equals(CancelContactResponse, a, b);
  }
}

