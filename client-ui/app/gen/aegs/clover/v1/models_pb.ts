// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file aegs/clover/v1/models.proto (package aegs.clover.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * 衛星。
 *
 * @generated from message aegs.clover.v1.Satellite
 */
export class Satellite extends Message<Satellite> {
  /**
   * 衛星の ID
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * 衛星の名前
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Satellite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.Satellite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Satellite {
    return new Satellite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Satellite {
    return new Satellite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Satellite {
    return new Satellite().fromJsonString(jsonString, options);
  }

  static equals(a: Satellite | PlainMessage<Satellite> | undefined, b: Satellite | PlainMessage<Satellite> | undefined): boolean {
    return proto3.util.equals(Satellite, a, b);
  }
}

/**
 * 登録された TLE の情報。
 *
 * @generated from message aegs.clover.v1.TLERecord
 */
export class TLERecord extends Message<TLERecord> {
  /**
   * TLE の ID
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * 登録された TLE
   *
   * @generated from field: aegs.clover.v1.TLE tle = 2;
   */
  tle?: TLE;

  /**
   * TLE の登録日時
   *
   * @generated from field: google.protobuf.Timestamp register_time = 3;
   */
  registerTime?: Timestamp;

  constructor(data?: PartialMessage<TLERecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.TLERecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "tle", kind: "message", T: TLE },
    { no: 3, name: "register_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLERecord {
    return new TLERecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLERecord {
    return new TLERecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLERecord {
    return new TLERecord().fromJsonString(jsonString, options);
  }

  static equals(a: TLERecord | PlainMessage<TLERecord> | undefined, b: TLERecord | PlainMessage<TLERecord> | undefined): boolean {
    return proto3.util.equals(TLERecord, a, b);
  }
}

/**
 * TLE (Two-Line Elements)。
 *
 * @generated from message aegs.clover.v1.TLE
 */
export class TLE extends Message<TLE> {
  /**
   * TLE の1行目
   *
   * @generated from field: string line1 = 1;
   */
  line1 = "";

  /**
   * TLE の2行目
   *
   * @generated from field: string line2 = 2;
   */
  line2 = "";

  constructor(data?: PartialMessage<TLE>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.TLE";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "line2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TLE {
    return new TLE().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TLE {
    return new TLE().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TLE {
    return new TLE().fromJsonString(jsonString, options);
  }

  static equals(a: TLE | PlainMessage<TLE> | undefined, b: TLE | PlainMessage<TLE> | undefined): boolean {
    return proto3.util.equals(TLE, a, b);
  }
}

/**
 * 地上局。
 *
 * @generated from message aegs.clover.v1.GroundStation
 */
export class GroundStation extends Message<GroundStation> {
  /**
   * 地上局の ID
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * 地上局の名前
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * 地上局の位置
   *
   * @generated from field: aegs.clover.v1.LatLngAlt location = 3;
   */
  location?: LatLngAlt;

  constructor(data?: PartialMessage<GroundStation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.GroundStation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "location", kind: "message", T: LatLngAlt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroundStation {
    return new GroundStation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroundStation {
    return new GroundStation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroundStation {
    return new GroundStation().fromJsonString(jsonString, options);
  }

  static equals(a: GroundStation | PlainMessage<GroundStation> | undefined, b: GroundStation | PlainMessage<GroundStation> | undefined): boolean {
    return proto3.util.equals(GroundStation, a, b);
  }
}

/**
 * 緯度・経度・高度からなる位置情報。
 * パスの計算に使用される。
 *
 * @generated from message aegs.clover.v1.LatLngAlt
 */
export class LatLngAlt extends Message<LatLngAlt> {
  /**
   * 緯度 [deg]
   *
   * @generated from field: double latitude = 1;
   */
  latitude = 0;

  /**
   * 経度 [deg]
   *
   * @generated from field: double longitude = 2;
   */
  longitude = 0;

  /**
   * 楕円体高 [meter]
   *
   * @generated from field: double altitude = 3;
   */
  altitude = 0;

  constructor(data?: PartialMessage<LatLngAlt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.LatLngAlt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "altitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LatLngAlt {
    return new LatLngAlt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LatLngAlt {
    return new LatLngAlt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LatLngAlt {
    return new LatLngAlt().fromJsonString(jsonString, options);
  }

  static equals(a: LatLngAlt | PlainMessage<LatLngAlt> | undefined, b: LatLngAlt | PlainMessage<LatLngAlt> | undefined): boolean {
    return proto3.util.equals(LatLngAlt, a, b);
  }
}

/**
 * 衛星パス。
 *
 * @generated from message aegs.clover.v1.Pass
 */
export class Pass extends Message<Pass> {
  /**
   * 当該パスの衛星
   *
   * @generated from field: aegs.clover.v1.Satellite satellite = 1;
   */
  satellite?: Satellite;

  /**
   * 当該パスの地上局
   *
   * @generated from field: aegs.clover.v1.GroundStation ground_station = 2;
   */
  groundStation?: GroundStation;

  /**
   * 当該パスの AOS/LOS と最大仰角
   *
   * @generated from field: aegs.clover.v1.PassDetails details = 3;
   */
  details?: PassDetails;

  /**
   * 当該パスがコンタクトとして予約可能かどうか
   *
   * @generated from field: bool is_available = 4;
   */
  isAvailable = false;

  constructor(data?: PartialMessage<Pass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.Pass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "satellite", kind: "message", T: Satellite },
    { no: 2, name: "ground_station", kind: "message", T: GroundStation },
    { no: 3, name: "details", kind: "message", T: PassDetails },
    { no: 4, name: "is_available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pass {
    return new Pass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pass {
    return new Pass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pass {
    return new Pass().fromJsonString(jsonString, options);
  }

  static equals(a: Pass | PlainMessage<Pass> | undefined, b: Pass | PlainMessage<Pass> | undefined): boolean {
    return proto3.util.equals(Pass, a, b);
  }
}

/**
 * パスの AOS/LOS 時刻と最大仰角といった詳細情報。
 *
 * @generated from message aegs.clover.v1.PassDetails
 */
export class PassDetails extends Message<PassDetails> {
  /**
   * AOS (Acquisition of Signal) 時刻
   *
   * @generated from field: google.protobuf.Timestamp aos = 1;
   */
  aos?: Timestamp;

  /**
   * LOS (Loss of Signal) 時刻
   *
   * @generated from field: google.protobuf.Timestamp los = 2;
   */
  los?: Timestamp;

  /**
   * 最大仰角 [deg]
   *
   * @generated from field: double max_elevation = 3;
   */
  maxElevation = 0;

  constructor(data?: PartialMessage<PassDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.PassDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "aos", kind: "message", T: Timestamp },
    { no: 2, name: "los", kind: "message", T: Timestamp },
    { no: 3, name: "max_elevation", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PassDetails {
    return new PassDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PassDetails {
    return new PassDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PassDetails {
    return new PassDetails().fromJsonString(jsonString, options);
  }

  static equals(a: PassDetails | PlainMessage<PassDetails> | undefined, b: PassDetails | PlainMessage<PassDetails> | undefined): boolean {
    return proto3.util.equals(PassDetails, a, b);
  }
}

/**
 * コンタクト。
 * Clover においては、予約されたパスを表す。
 *
 * @generated from message aegs.clover.v1.Contact
 */
export class Contact extends Message<Contact> {
  /**
   * コンタクトの ID
   *
   * @generated from field: int64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * コンタクト対象の衛星の ID
   *
   * @generated from field: int64 satellite_id = 2;
   */
  satelliteId = protoInt64.zero;

  /**
   * コンタクトで使用する地上局の ID
   *
   * @generated from field: int64 ground_station_id = 3;
   */
  groundStationId = protoInt64.zero;

  /**
   * コンタクトのステータス
   *
   * @generated from field: aegs.clover.v1.Contact.Status status = 4;
   */
  status = Contact_Status.UNSPECIFIED;

  /**
   * コンタクトの開始時刻。
   * AOSに対してバッファを持たせた時刻が設定され、この時刻をもとに予約の排他制御が行われる
   *
   * @generated from field: google.protobuf.Timestamp start_time = 5;
   */
  startTime?: Timestamp;

  /**
   * コンタクトの終了時刻。
   * LOSに対してバッファを持たせた時刻が設定され、この時刻をもとに予約の排他制御が行われる
   *
   * @generated from field: google.protobuf.Timestamp end_time = 6;
   */
  endTime?: Timestamp;

  /**
   * コンタクトの作成日時
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * コンタクトの更新日時。
   * 基本的にはステータスの変更時刻を表す
   *
   * @generated from field: google.protobuf.Timestamp update_time = 8;
   */
  updateTime?: Timestamp;

  /**
   * リクエスト時の TLE に基づいて計算されたパスの詳細。
   * GetContact の場合にのみ値が設定される。
   * コンタクト時刻の前後にパスが見つからなかった場合は値が設定されない
   *
   * @generated from field: aegs.clover.v1.PassDetails pass = 9;
   */
  pass?: PassDetails;

  constructor(data?: PartialMessage<Contact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aegs.clover.v1.Contact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "satellite_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ground_station_id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(Contact_Status) },
    { no: 5, name: "start_time", kind: "message", T: Timestamp },
    { no: 6, name: "end_time", kind: "message", T: Timestamp },
    { no: 7, name: "create_time", kind: "message", T: Timestamp },
    { no: 8, name: "update_time", kind: "message", T: Timestamp },
    { no: 9, name: "pass", kind: "message", T: PassDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contact {
    return new Contact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contact {
    return new Contact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contact {
    return new Contact().fromJsonString(jsonString, options);
  }

  static equals(a: Contact | PlainMessage<Contact> | undefined, b: Contact | PlainMessage<Contact> | undefined): boolean {
    return proto3.util.equals(Contact, a, b);
  }
}

/**
 * コンタクトの状態。
 *
 * @generated from enum aegs.clover.v1.Contact.Status
 */
export enum Contact_Status {
  /**
   * ステータスの値が設定されていない場合の値。
   * この値が設定された場合は異常な状態であるため、アークエッジ・スペースの担当者に連絡すること
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 局管理者の確認待ちの状態。
   * コンタクトを予約した直後の初期状態。
   * この状態から他の状態に遷移したあと、この状態に戻ることはない
   *
   * @generated from enum value: STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * 局管理者に承認され、コンタクトの予約が有効な状態
   *
   * @generated from enum value: STATUS_SCHEDULED = 2;
   */
  SCHEDULED = 2,

  /**
   * 局管理者に拒否され、コンタクトの予約が無効な状態
   * 他の状態に遷移しない終端状態
   *
   * @generated from enum value: STATUS_REJECTED = 3;
   */
  REJECTED = 3,

  /**
   * ユーザがコンタクトの予約をキャンセルした状態。
   * 他の状態に遷移しない終端状態
   *
   * @generated from enum value: STATUS_CANCELED = 4;
   */
  CANCELED = 4,

  /**
   * コンタクトが実行中の状態。
   * この状態になると、キャンセルできなくなる
   *
   * @generated from enum value: STATUS_RUNNING = 5;
   */
  RUNNING = 5,

  /**
   * コンタクトが完了した状態。
   * 他の状態に遷移しない終端状態
   *
   * @generated from enum value: STATUS_COMPLETED = 6;
   */
  COMPLETED = 6,

  /**
   * コンタクトが何らかの理由で失敗した状態。
   * 他の状態に遷移しない終端状態
   *
   * @generated from enum value: STATUS_FAILED = 7;
   */
  FAILED = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(Contact_Status)
proto3.util.setEnumType(Contact_Status, "aegs.clover.v1.Contact.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_PENDING" },
  { no: 2, name: "STATUS_SCHEDULED" },
  { no: 3, name: "STATUS_REJECTED" },
  { no: 4, name: "STATUS_CANCELED" },
  { no: 5, name: "STATUS_RUNNING" },
  { no: 6, name: "STATUS_COMPLETED" },
  { no: 7, name: "STATUS_FAILED" },
]);

